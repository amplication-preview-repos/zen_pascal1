/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Survey as PrismaSurvey,
  Question as PrismaQuestion,
} from "@prisma/client";
import { SurveyCreateInput } from "./SurveyCreateInput";
import { Survey } from "./Survey";
import { SurveyWhereUniqueInput } from "./SurveyWhereUniqueInput";
import { SurveyFindManyArgs } from "./SurveyFindManyArgs";
import { SurveyFindUniqueArgs } from "./SurveyFindUniqueArgs";
import { SurveyUpdateInput } from "./SurveyUpdateInput";

export class SurveyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SurveyCountArgs, "select">): Promise<number> {
    return this.prisma.survey.count(args);
  }

  async surveys<T extends Prisma.SurveyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyFindManyArgs>
  ): Promise<PrismaSurvey[]> {
    return this.prisma.survey.findMany<Prisma.SurveyFindManyArgs>(args);
  }
  async survey<T extends Prisma.SurveyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyFindUniqueArgs>
  ): Promise<PrismaSurvey | null> {
    return this.prisma.survey.findUnique(args);
  }
  async createSurvey<T extends Prisma.SurveyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyCreateArgs>
  ): Promise<PrismaSurvey> {
    return this.prisma.survey.create<T>(args);
  }
  async updateSurvey<T extends Prisma.SurveyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyUpdateArgs>
  ): Promise<PrismaSurvey> {
    return this.prisma.survey.update<T>(args);
  }
  async deleteSurvey<T extends Prisma.SurveyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SurveyDeleteArgs>
  ): Promise<PrismaSurvey> {
    return this.prisma.survey.delete(args);
  }

  async findQuestions(
    parentId: string,
    args: Prisma.QuestionFindManyArgs
  ): Promise<PrismaQuestion[]> {
    return this.prisma.survey
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questions(args);
  }
  async CreateSurvey(args: SurveyCreateInput): Promise<Survey> {
    throw new Error("Not implemented");
  }
  async DeleteSurvey(args: SurveyWhereUniqueInput): Promise<Survey> {
    throw new Error("Not implemented");
  }
  async GetAllSurveys(args: SurveyFindManyArgs): Promise<Survey[]> {
    throw new Error("Not implemented");
  }
  async GetSurveyById(args: SurveyFindUniqueArgs): Promise<Survey> {
    throw new Error("Not implemented");
  }
  async UpdateSurvey(args: SurveyUpdateInput): Promise<Survey> {
    throw new Error("Not implemented");
  }
}
