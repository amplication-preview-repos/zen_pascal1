/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Research } from "./Research";
import { ResearchCountArgs } from "./ResearchCountArgs";
import { ResearchFindManyArgs } from "./ResearchFindManyArgs";
import { ResearchFindUniqueArgs } from "./ResearchFindUniqueArgs";
import { CreateResearchArgs } from "./CreateResearchArgs";
import { UpdateResearchArgs } from "./UpdateResearchArgs";
import { DeleteResearchArgs } from "./DeleteResearchArgs";
import { ResearchService } from "../research.service";
@graphql.Resolver(() => Research)
export class ResearchResolverBase {
  constructor(protected readonly service: ResearchService) {}

  async _researchItemsMeta(
    @graphql.Args() args: ResearchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Research])
  async researchItems(
    @graphql.Args() args: ResearchFindManyArgs
  ): Promise<Research[]> {
    return this.service.researchItems(args);
  }

  @graphql.Query(() => Research, { nullable: true })
  async research(
    @graphql.Args() args: ResearchFindUniqueArgs
  ): Promise<Research | null> {
    const result = await this.service.research(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Research)
  async createResearch(
    @graphql.Args() args: CreateResearchArgs
  ): Promise<Research> {
    return await this.service.createResearch({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Research)
  async updateResearch(
    @graphql.Args() args: UpdateResearchArgs
  ): Promise<Research | null> {
    try {
      return await this.service.updateResearch({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Research)
  async deleteResearch(
    @graphql.Args() args: DeleteResearchArgs
  ): Promise<Research | null> {
    try {
      return await this.service.deleteResearch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
