/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResearchService } from "../research.service";
import { ResearchCreateInput } from "./ResearchCreateInput";
import { Research } from "./Research";
import { ResearchFindManyArgs } from "./ResearchFindManyArgs";
import { ResearchWhereUniqueInput } from "./ResearchWhereUniqueInput";
import { ResearchUpdateInput } from "./ResearchUpdateInput";

export class ResearchControllerBase {
  constructor(protected readonly service: ResearchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Research })
  async createResearch(
    @common.Body() data: ResearchCreateInput
  ): Promise<Research> {
    return await this.service.createResearch({
      data: data,
      select: {
        abstract: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Research] })
  @ApiNestedQuery(ResearchFindManyArgs)
  async researchItems(@common.Req() request: Request): Promise<Research[]> {
    const args = plainToClass(ResearchFindManyArgs, request.query);
    return this.service.researchItems({
      ...args,
      select: {
        abstract: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Research })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async research(
    @common.Param() params: ResearchWhereUniqueInput
  ): Promise<Research | null> {
    const result = await this.service.research({
      where: params,
      select: {
        abstract: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Research })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResearch(
    @common.Param() params: ResearchWhereUniqueInput,
    @common.Body() data: ResearchUpdateInput
  ): Promise<Research | null> {
    try {
      return await this.service.updateResearch({
        where: params,
        data: data,
        select: {
          abstract: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Research })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResearch(
    @common.Param() params: ResearchWhereUniqueInput
  ): Promise<Research | null> {
    try {
      return await this.service.deleteResearch({
        where: params,
        select: {
          abstract: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
